-- =====================================================
-- Supabase Storage & Database Setup
-- =====================================================
-- Run this in your Supabase SQL Editor
-- =====================================================

-- 1. Create users table (extends Supabase auth.users)
create table if not exists public.users (
  id uuid primary key references auth.users(id) on delete cascade,
  email text unique not null,
  username text unique not null,
  full_name text,
  avatar_url text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- 2. Create posts table
create table if not exists public.posts (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references public.users(id) on delete cascade,
  title text not null,
  content text,
  media_id uuid references public.media(id) on delete set null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- 3. Create media metadata table
create table if not exists public.media (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  bucket text not null check (bucket in ('images','audio')),
  path text not null unique,
  mime text not null,
  size_bytes bigint not null,
  kind text not null check (kind in ('image','audio')),
  duration_sec numeric,
  width int,
  height int,
  created_at timestamptz not null default now()
);

-- 4. Enable Row Level Security
alter table public.users enable row level security;
alter table public.posts enable row level security;
alter table public.media enable row level security;

-- 5. Drop existing policies if they exist
drop policy if exists "users_select_all" on public.users;
drop policy if exists "users_insert_own" on public.users;
drop policy if exists "users_update_own" on public.users;

drop policy if exists "posts_select_all" on public.posts;
drop policy if exists "posts_insert_own" on public.posts;
drop policy if exists "posts_update_own" on public.posts;
drop policy if exists "posts_delete_own" on public.posts;

drop policy if exists "user_select_own" on public.media;
drop policy if exists "user_insert_own" on public.media;

-- 6. Create policies for users table
create policy "users_select_all"
  on public.users for select
  using (true);

create policy "users_insert_own"
  on public.users for insert
  with check (auth.uid() = id);

create policy "users_update_own"
  on public.users for update
  using (auth.uid() = id);

-- 7. Create policies for posts table
create policy "posts_select_all"
  on public.posts for select
  using (true);

create policy "posts_insert_own"
  on public.posts for insert
  with check (auth.uid() = user_id);

create policy "posts_update_own"
  on public.posts for update
  using (auth.uid() = user_id);

create policy "posts_delete_own"
  on public.posts for delete
  using (auth.uid() = user_id);

-- 8. Create policies for media table
create policy "media_select_all"
  on public.media for select
  using (true);

create policy "user_insert_own"
  on public.media for insert
  with check (auth.uid() = user_id);

create policy "user_update_own"
  on public.media for update
  using (auth.uid() = user_id);

create policy "user_delete_own"
  on public.media for delete
  using (auth.uid() = user_id);

-- =====================================================
-- MANUAL STEPS REQUIRED:
-- =====================================================
-- After running this SQL, go to Storage section and:
-- 1. Create bucket named: images (set to PRIVATE)
-- 2. Create bucket named: audio (set to PRIVATE)
-- 
-- Both buckets MUST be private for security!
-- Access will be via signed URLs generated by the API.
-- =====================================================

